#include <cilk-lib.cilkh>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <errno.h>
#include <stdarg.h>
#include "util/util.h"

#ifndef ATYPE
#define ATYPE int
#endif

#ifndef SEP
#define SEP ";"
#endif

static ATYPE* geninput(int n);
cilk static void benchmark(ATYPE data[], int n, int chunk, double* dtime);
cilk static void scan(ATYPE a[], int n, int chunk);
cilk static void add_up(ATYPE* a, ATYPE* b, int i, int n);
cilk static void reduce_down(ATYPE* a, ATYPE* b, int i, int n);
static ATYPE* reference(int n);

static void* xmalloc(int size);
static int array_equal(ATYPE* a1, ATYPE* a2, int n);
static void print_array(const char* caption, ATYPE a[], int n);
static void print_perf(int n, int chunk, int t, double dtime);
static void print_perf_debug(int n, int chunk, int t, double dtime);
static void fail(const char* format, ...);

cilk int main(int argc, char* argv[])
{
	int debug_flag;
	int n;
	int chunk;
	ATYPE* data;
	ATYPE* ref;
	double dtime;

	if (parse_args(argc, argv, &debug_flag, "input size", &n, "chunk size", &chunk, NULL, NULL, NULL, NULL) != 0)
	{
		fail("Error while parsing args.");
	}

	data = geninput(n);

	if (n < 1)
	{
		fail("Input size n must be positive.");
	}

	spawn benchmark(data, n, chunk, &dtime);
	sync;

	if (debug_flag)
	{
		/* ========== OUTPUT =========== */

		print_array("Result", data, n);
		print_perf_debug(n, chunk, Cilk_active_size, dtime);

		ref = reference(n);

		if (array_equal(data, ref, n))
		{
			printf("SUCCESS\n");
		}
		else
		{
			printf("EPIC FAILURE\n");
		}

		free(ref);
	}
	else
	{
		print_perf(n, chunk, Cilk_active_size, dtime);
	}

	free(data);
	return 0;
}


static ATYPE* geninput(int n)
{
	int i;
	ATYPE* a = xmalloc(n * sizeof(ATYPE));

	for (i = 0; i < n; i++)
	{
		// block[i] = (global_i % 3) == 0;
		a[i] = i + 1;
	}

	return a;
}

cilk static void benchmark(ATYPE* data, int n, int chunk, double* dtime)
{
	Cilk_time stime;
	Cilk_time etime;

	stime = Cilk_get_wall_time();
	spawn scan(data, n, chunk);
	sync;
	etime = Cilk_get_wall_time();

	*dtime = Cilk_wall_time_to_sec(etime - stime);
}

cilk static void scan(ATYPE* in, int length, int chunk)
{
	int start;
	int count;
	int half;
	ATYPE* out;

	if (length <= 1) return;

	half = length/2;
	out = Cilk_alloca(sizeof(ATYPE) * half);

	for (start = 0; start < half; start += chunk) 
	{
		count = chunk;
		if (start + chunk > half) count = half-start;

		spawn add_up(in, out, start, count);
	}
	sync;

	spawn scan(out, half, chunk);
	sync;

	in[1] = out[0];

	for (start = 1; start < half; start += chunk) 
	{
		count = chunk;
		if (start + chunk > half) count = half-start;

		spawn reduce_down(in, out, start, count);
	}
	sync;

	if (length % 2)
	{
		in[length-1] = out[half-1] + in[length-1];
	}
}

cilk static void add_up(ATYPE* a, ATYPE* b, int i, int n)
{
	int j;
	for (j = i; j < i+n; j++) 
	{
		b[j] = a[2*j] + a[2*j+1];
	}
}

cilk static void reduce_down(ATYPE* a, ATYPE* b, int i, int n)
{
	int j;
	for (j = i; j < i+n; j++) 
	{
		a[2*j] = b[j-1] + a[2*j];
		a[2*j+1] = b[j];
	}
}

static ATYPE* reference(int n)
{
	int i;
	ATYPE* a = geninput(n);

	for (i = 1; i < n; i++)
	{
		a[i] += a[i-1];
	}

	return a;
}


static void* xmalloc(int size)
{
	void* ret = malloc(size);
	if (NULL == ret)
	{
		fail("MALLOC ERROR: %s\n", strerror(errno));
	}
	else return ret;
}

static void print_array(const char* caption, ATYPE a[], int n)
{
	int i;
	printf("%s:\n", caption);
	for (i = 0; i < n; i++) 
	{
		printf("%d,", a[i]);
	}
	printf("\n");
}

static int array_equal(ATYPE* a1, ATYPE* a2, int n)
{
	int i;
	for (i = 0; i < n; i++)
	{
		if (a1[i] != a2[i]) return 0;
	}

	return 1;
}

static void print_perf(int n, int chunk, int t, double dtime)
{
	printf("%d%s%d%s%d%s%f\n", n, SEP, chunk, SEP, t, SEP, dtime);
}

static void print_perf_debug(int n, int chunk, int t, double dtime)
{
	printf("Threads: %d\n", t);
	printf("Input size: %d\n", n);
	printf("Chunk size: %d\n", chunk);
	printf("Time: %f seconds\n", dtime);
}

static void fail(const char* format, ...)
{
	va_list args;
    va_start(args, format);
    vfprintf(stderr, format, args);
    va_end(args);
	exit(1);
}
